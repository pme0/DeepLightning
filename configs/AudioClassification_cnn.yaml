modes: 
  train: true
  test: true
  
task: classification
data:
  root: /Users/pme/data/FSD
  num_workers: 4
  batch_size: 256
  module: 
    target: deeplightning.data.audio.fsd.FreeSpokenDigit
  train_transforms:
    normalize: # use `deeplightning.utilities.data.compute_dataset_mean_and_stdev()`
      mean: [0.4711]
      stdev: [0.1464]
  test_transforms:
    normalize:
      mean: [0.4711]
      stdev: [0.1464]
 
model:
  module: 
    target: deeplightning.task.image.classification.ImageClassification
  network:
    target: deeplightning.model.cnn.SpectrogramCNN
    params: 
      num_classes: 10
      num_channels: 1
  optimizer:
    target: torch.optim.Adam
    params:
      lr: 0.001
  scheduler:
    target: torch.optim.lr_scheduler.ExponentialLR
    params:
      gamma: 0.99
    call:
      interval: "epoch"
      frequency: 1
  loss:
    target: torch.nn.CrossEntropyLoss
    params:

engine:
  backend: ddp
  gpus: [0]
  num_nodes: 1
  precision: 32

train:
  num_epochs: 20
  val_every_n_epoch: 1
  grad_accum_from_epoch: 0
  grad_accum_every_n_batches: 1
  ckpt_resume_path: null
  ckpt_every_n_epochs: 1
  early_stop_metric: null
  early_stop_delta: 0.001
  early_stop_patience: 3

test:
  ckpt_test_path: /PATH_TO_CKPT # used only when `modes.test=True` and `modes.train=False`
  
logger:
  log_to_wandb: true
  project_name: AudioClassification_FSD_CNN
  tags: ["audio", "classification", "cnn"] # cannot be empty
  notes: null
  log_every_n_steps: 10
  type: pytorch_lightning.loggers.MLFlowLogger
  params:
    experiment_name: Default
    tracking_uri: mlruns